from pdfminer.high_level import extract_text
import json
import re
def extract_text_from_pdf(**kwargs)->str:
    return extract_text(kwargs['file_path'])

def extract_file_metadata(**kwargs):
    text:str = kwargs['text'] if kwargs['text'] else ""
    title:str = text.strip('\n')[0].split()
    author_line = text[1]
    authors:list[str] = [author.strip() for author in author_line.split(',')]
    abstract_pattern = re.compile(r'(Abstract|ABSTRACT|abstract)(.*?)(\n$)',flags=re.DOTALL)
    abstract_match = abstract_pattern.search(text)
    abstract:str = abstract_match.group(2).strip() if abstract_match else f"Abstract Not Found in the Paper{title}"
    return title,authors,abstract

def extract_sections(**kwargs)->dict:
    text = kwargs['text'] if kwargs['text'] else"" 
    sections_patterns = {
        'introduction':'introduction|Introduction|INTRODUCTION',
        'background': 'background|BACKGROUND|Background',
        'summary':'Summary|SUMMARY|summary',
        'objectives':'Objectives|OBJECTIVES|objectives|OBJECTIVE|OBjective|objective',
        'discussion':'Discussion|DISCUSSION|discussion',
        'methods':'Methods|METHODS|methods|Material and Methods|Method|METHOD|method',
        'observations':'Observations|OBSERVATIONS|observations|OBSERVATION|observation|Observation',
        'clinical':'Clinical|CLINICAL|clinical',
        'experiments':'Experiments|experiments|EXPERIMENTS',
        'effects':'Effects|effects|EFFECTS|Effect|effect|EFFECT',
        'results' : 'Results|results|RESULTS|result|Result|RESULT',
        'conclusion':'Conclusion|CONCLUSION|conclusion',
    }
    sections = {section:"" for section in sections_patterns.keys()}
    for section,pattern in sections_patterns.items():
        pattern = re.compile(pattern=r'(?<=\n)'+re.escape(pattern)+r'(?=\n)(.*?)(?=\n\n|$)', flags=re.DOTALL|re.IGNORECASE)
        match = pattern.search(text)
        sections[section] = match.group(1).strip() if match else f"{sections[section]} is not present in the document"
        return sections

def extract_references(**kwargs)->list:
    text = kwargs['text'] if kwargs['text'] else ""
    reference_pattern = re.compile(re.escape(r'(References|REFERENCES|references|Reference|reference|REFERENCE)(.?*)\n'),flags=re.DOTALL)
    reference_match = reference_pattern.search(text)
    if reference_match:
        reference_text = reference_match.group(2).strip()
        references = [ref.strip() for ref in reference_text.split('\n') if ref.split()]
        return references
    else:
        return['references not found for this document']

def format_to_json(**kwargs):
    pdf_path = kwargs['input_path']
    raw_text = extract_text_from_pdf(file_path=pdf_path)
    title,authors,abstract = extract_file_metadata(text=raw_text)
    sections = extract_sections(text=raw_text)
    references = extract_references(text=raw_text)
    data = {
        'title' : title, 
        'authors':authors,
        'abstract':abstract,
        'sections':sections,
        'references':references
    }
    json_file = kwargs['output_path']
    with open(json_file, 'a+', encoding='utf-8') as jfile:
        json.dump(data,jfile,indent=4, ensure_ascii=False)
    

def main(**kwargs):
    file_path = kwargs['output_path']
    for i in range(kwargs['start'], kwargs['end']+1):
        format_to_json(input_path=rf'../../data/doc/pdf-{i}.pdf', output_path=file_path)

if __name__=='__main__':
    main(output_path=rf'../../data/raw/pdf-data.json',start=1,end=28)
    


